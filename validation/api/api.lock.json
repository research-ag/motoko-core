[
  {
    "name": "Array",
    "exports": [
      "public func all<T>(array : [T], predicate : T -> Bool) : Bool",
      "public func any<T>(array : [T], predicate : T -> Bool) : Bool",
      "public func compare<T>(array1 : [T], array2 : [T], compare : (T, T) -> Order.Order) : Order.Order",
      "public func concat<T>(array1 : [T], array2 : [T]) : [T]",
      "public func empty<T>() : [T]",
      "public func enumerate<T>(array : [T]) : Types.Iter<(Nat, T)>",
      "public func equal<T>(array1 : [T], array2 : [T], equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(array : [T], f : T -> Bool) : [T]",
      "public func filterMap<T, R>(array : [T], f : T -> ?R) : [R]",
      "public func find<T>(array : [T], predicate : T -> Bool) : ?T",
      "public func findIndex<T>(array : [T], predicate : T -> Bool) : ?Nat",
      "public func flatMap<T, R>(array : [T], k : T -> Types.Iter<R>) : [R]",
      "public func flatten<T>(arrays : [[T]]) : [T]",
      "public func foldLeft<T, A>(array : [T], base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(array : [T], base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(array : [T], f : T -> ())",
      "public func fromIter<T>(iter : Types.Iter<T>) : [T]",
      "public func fromVarArray<T>(varArray : [var T]) : [T]",
      "public func indexOf<T>(element : T, array : [T], equal : (T, T) -> Bool) : ?Nat",
      "public func isEmpty<T>(array : [T]) : Bool",
      "public func join<T>(arrays : Types.Iter<[T]>) : [T]",
      "public func keys<T>(array : [T]) : Types.Iter<Nat>",
      "public func lastIndexOf<T>(element : T, array : [T], equal : (T, T) -> Bool) : ?Nat",
      "public func map<T, R>(array : [T], f : T -> R) : [R]",
      "public func mapEntries<T, R>(array : [T], f : (T, Nat) -> R) : [R]",
      "public func mapResult<T, R, E>(array : [T], f : T -> Result.Result<R, E>) : Result.Result<[R], E>",
      "public func nextIndexOf<T>(element : T, array : [T], fromInclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func prevIndexOf<T>(element : T, array : [T], fromExclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func range<T>(array : [T], fromInclusive : Int, toExclusive : Int) : Types.Iter<T>",
      "public func repeat<T>(item : T, size : Nat) : [T]",
      "public func reverse<T>(array : [T]) : [T]",
      "public func singleton<T>(element : T) : [T]",
      "public func size<T>(array : [T]) : Nat",
      "public func sliceToArray<T>(array : [T], fromInclusive : Int, toExclusive : Int) : [T]",
      "public func sort<T>(array : [T], compare : (T, T) -> Order.Order) : [T]",
      "public func tabulate<T>(size : Nat, generator : Nat -> T) : [T]",
      "public func toText<T>(array : [T], f : T -> Text) : Text",
      "public func toVarArray<T>(array : [T]) : [var T]",
      "public func values<T>(array : [T]) : Types.Iter<T>"
    ]
  },
  {
    "name": "Blob",
    "exports": [
      "public type Blob",
      "public func compare(b1 : Blob, b2 : Blob) : Order.Order",
      "public func empty() : Blob",
      "public func equal(blob1 : Blob, blob2 : Blob) : Bool",
      "public func fromArray(bytes : [Nat8]) : Blob",
      "public func fromVarArray(bytes : [var Nat8]) : Blob",
      "public func greater(blob1 : Blob, blob2 : Blob) : Bool",
      "public func greaterOrEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func hash(blob : Blob) : Types.Hash",
      "public func isEmpty(blob : Blob) : Bool",
      "public func less(blob1 : Blob, blob2 : Blob) : Bool",
      "public func lessOrEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func notEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func size(blob : Blob) : Nat",
      "public func toArray(blob : Blob) : [Nat8]",
      "public func toVarArray(blob : Blob) : [var Nat8]"
    ]
  },
  {
    "name": "Bool",
    "exports": [
      "public func allValues() : Iter.Iter<Bool>",
      "public type Bool",
      "public func compare(a : Bool, b : Bool) : Order.Order",
      "public func equal(a : Bool, b : Bool) : Bool",
      "public func logicalAnd(a : Bool, b : Bool) : Bool",
      "public func logicalNot(bool : Bool) : Bool",
      "public func logicalOr(a : Bool, b : Bool) : Bool",
      "public func logicalXor(a : Bool, b : Bool) : Bool",
      "public func toText(bool : Bool) : Text"
    ]
  },
  {
    "name": "CertifiedData",
    "exports": [
      "public let getCertificate : () -> ?Blob",
      "public let set : (data : Blob) -> ()"
    ]
  },
  {
    "name": "Char",
    "exports": [
      "public type Char",
      "public func compare(a : Char, b : Char) : { #less; #equal; #greater }",
      "public func equal(a : Char, b : Char) : Bool",
      "public let fromNat32 : (nat32 : Nat32) -> Char",
      "public func greater(a : Char, b : Char) : Bool",
      "public func greaterOrEqual(a : Char, b : Char) : Bool",
      "public let isAlphabetic : (char : Char) -> Bool",
      "public func isDigit(char : Char) : Bool",
      "public let isLower : (char : Char) -> Bool",
      "public let isUpper : (char : Char) -> Bool",
      "public let isWhitespace : (char : Char) -> Bool",
      "public func less(a : Char, b : Char) : Bool",
      "public func lessOrEqual(a : Char, b : Char) : Bool",
      "public func notEqual(a : Char, b : Char) : Bool",
      "public let toNat32 : (char : Char) -> Nat32",
      "public let toText : (char : Char) -> Text"
    ]
  },
  {
    "name": "Cycles",
    "exports": [
      "public let accept : <system>(amount : Nat) -> (accepted : Nat)",
      "public let available : () -> (amount : Nat)",
      "public let balance : () -> (amount : Nat)",
      "public let burn : <system>(amount : Nat) -> (burned : Nat)",
      "public let refunded : () -> (amount : Nat)"
    ]
  },
  {
    "name": "Debug",
    "exports": [
      "public func print(text : Text)",
      "public func todo() : None"
    ]
  },
  {
    "name": "Error",
    "exports": [
      "public let code : (error : Error) -> ErrorCode",
      "public type Error",
      "public type ErrorCode",
      "public func isRetryPossible(error : Error) : Bool",
      "public let message : (error : Error) -> Text",
      "public let reject : (message : Text) -> Error"
    ]
  },
  {
    "name": "Float",
    "exports": [
      "public let abs : (x : Float) -> Float",
      "public func add(x : Float, y : Float) : Float",
      "public let arccos : (x : Float) -> Float",
      "public let arcsin : (x : Float) -> Float",
      "public let arctan : (x : Float) -> Float",
      "public let arctan2 : (y : Float, x : Float) -> Float",
      "public let ceil : (x : Float) -> Float",
      "public func compare(x : Float, y : Float) : Order.Order",
      "public let copySign : (x : Float, y : Float) -> Float",
      "public let cos : (x : Float) -> Float",
      "public func div(x : Float, y : Float) : Float",
      "public let e : Float",
      "public func equal(x : Float, y : Float, epsilon : Float) : Bool",
      "public let exp : (x : Float) -> Float",
      "public type Float",
      "public let floor : (x : Float) -> Float",
      "public func format(fmt : { #fix : Nat8; #exp : Nat8; #gen : Nat8; #exact }, x : Float) : Text",
      "public let fromInt : Int -> Float",
      "public let fromInt64 : Int64 -> Float",
      "public func greater(x : Float, y : Float) : Bool",
      "public func greaterOrEqual(x : Float, y : Float) : Bool",
      "public func isNaN(number : Float) : Bool",
      "public func less(x : Float, y : Float) : Bool",
      "public func lessOrEqual(x : Float, y : Float) : Bool",
      "public let log : (x : Float) -> Float",
      "public let max : (x : Float, y : Float) -> Float",
      "public let min : (x : Float, y : Float) -> Float",
      "public func mul(x : Float, y : Float) : Float",
      "public let nearest : (x : Float) -> Float",
      "public func neg(x : Float) : Float",
      "public func notEqual(x : Float, y : Float, epsilon : Float) : Bool",
      "public let pi : Float",
      "public func pow(x : Float, y : Float) : Float",
      "public func rem(x : Float, y : Float) : Float",
      "public let sin : (x : Float) -> Float",
      "public let sqrt : (x : Float) -> Float",
      "public func sub(x : Float, y : Float) : Float",
      "public let tan : (x : Float) -> Float",
      "public let toInt : Float -> Int",
      "public let toInt64 : Float -> Int64",
      "public let toText : Float -> Text",
      "public let trunc : (x : Float) -> Float"
    ]
  },
  {
    "name": "Func",
    "exports": [
      "public func compose<A, B, C>(f : B -> C, g : A -> B) : A -> C",
      "public func const<A, B>(x : A) : B -> A",
      "public func identity<A>(x : A) : A"
    ]
  },
  {
    "name": "Int",
    "exports": [
      "public func abs(x : Int) : Nat",
      "public func add(x : Int, y : Int) : Int",
      "public func compare(x : Int, y : Int) : Order.Order",
      "public func div(x : Int, y : Int) : Int",
      "public func equal(x : Int, y : Int) : Bool",
      "public func fromNat(nat : Nat) : Int",
      "public func fromText(text : Text) : ?Int",
      "public func greater(x : Int, y : Int) : Bool",
      "public func greaterOrEqual(x : Int, y : Int) : Bool",
      "public type Int",
      "public func less(x : Int, y : Int) : Bool",
      "public func lessOrEqual(x : Int, y : Int) : Bool",
      "public func max(x : Int, y : Int) : Int",
      "public func min(x : Int, y : Int) : Int",
      "public func mul(x : Int, y : Int) : Int",
      "public func neg(x : Int) : Int",
      "public func notEqual(x : Int, y : Int) : Bool",
      "public func pow(x : Int, y : Int) : Int",
      "public func range(fromInclusive : Int, toExclusive : Int) : Iter.Iter<Int>",
      "public func rangeBy(fromInclusive : Int, toExclusive : Int, step : Int) : Iter.Iter<Int>",
      "public func rangeByInclusive(from : Int, to : Int, step : Int) : Iter.Iter<Int>",
      "public func rangeInclusive(from : Int, to : Int) : Iter.Iter<Int>",
      "public func rem(x : Int, y : Int) : Int",
      "public func sub(x : Int, y : Int) : Int",
      "public func toNat(int : Int) : Nat",
      "public func toText(x : Int) : Text"
    ]
  },
  {
    "name": "Int16",
    "exports": [
      "public func abs(x : Int16) : Int16",
      "public func add(x : Int16, y : Int16) : Int16",
      "public func addWrap(x : Int16, y : Int16) : Int16",
      "public func allValues() : Iter.Iter<Int16>",
      "public func bitand(x : Int16, y : Int16) : Int16",
      "public func bitclear(x : Int16, p : Nat) : Int16",
      "public let bitcountLeadingZero : (x : Int16) -> Int16",
      "public let bitcountNonZero : (x : Int16) -> Int16",
      "public let bitcountTrailingZero : (x : Int16) -> Int16",
      "public func bitflip(x : Int16, p : Nat) : Int16",
      "public func bitnot(x : Int16) : Int16",
      "public func bitor(x : Int16, y : Int16) : Int16",
      "public func bitrotLeft(x : Int16, y : Int16) : Int16",
      "public func bitrotRight(x : Int16, y : Int16) : Int16",
      "public func bitset(x : Int16, p : Nat) : Int16",
      "public func bitshiftLeft(x : Int16, y : Int16) : Int16",
      "public func bitshiftRight(x : Int16, y : Int16) : Int16",
      "public func bittest(x : Int16, p : Nat) : Bool",
      "public func bitxor(x : Int16, y : Int16) : Int16",
      "public func compare(x : Int16, y : Int16) : Order.Order",
      "public func div(x : Int16, y : Int16) : Int16",
      "public func equal(x : Int16, y : Int16) : Bool",
      "public let fromInt : Int -> Int16",
      "public let fromInt32 : Int32 -> Int16",
      "public let fromInt8 : Int8 -> Int16",
      "public let fromIntWrap : Int -> Int16",
      "public let fromNat16 : Nat16 -> Int16",
      "public func greater(x : Int16, y : Int16) : Bool",
      "public func greaterOrEqual(x : Int16, y : Int16) : Bool",
      "public type Int16",
      "public func less(x : Int16, y : Int16) : Bool",
      "public func lessOrEqual(x : Int16, y : Int16) : Bool",
      "public func max(x : Int16, y : Int16) : Int16",
      "public let maxValue : Int16",
      "public func min(x : Int16, y : Int16) : Int16",
      "public let minValue : Int16",
      "public func mul(x : Int16, y : Int16) : Int16",
      "public func mulWrap(x : Int16, y : Int16) : Int16",
      "public func neg(x : Int16) : Int16",
      "public func notEqual(x : Int16, y : Int16) : Bool",
      "public func pow(x : Int16, y : Int16) : Int16",
      "public func powWrap(x : Int16, y : Int16) : Int16",
      "public func range(fromInclusive : Int16, toExclusive : Int16) : Iter.Iter<Int16>",
      "public func rangeInclusive(from : Int16, to : Int16) : Iter.Iter<Int16>",
      "public func rem(x : Int16, y : Int16) : Int16",
      "public func sub(x : Int16, y : Int16) : Int16",
      "public func subWrap(x : Int16, y : Int16) : Int16",
      "public let toInt : Int16 -> Int",
      "public let toInt32 : Int16 -> Int32",
      "public let toInt8 : Int16 -> Int8",
      "public let toNat16 : Int16 -> Nat16",
      "public func toText(x : Int16) : Text"
    ]
  },
  {
    "name": "Int32",
    "exports": [
      "public func abs(x : Int32) : Int32",
      "public func add(x : Int32, y : Int32) : Int32",
      "public func addWrap(x : Int32, y : Int32) : Int32",
      "public func allValues() : Iter.Iter<Int32>",
      "public func bitand(x : Int32, y : Int32) : Int32",
      "public func bitclear(x : Int32, p : Nat) : Int32",
      "public let bitcountLeadingZero : (x : Int32) -> Int32",
      "public let bitcountNonZero : (x : Int32) -> Int32",
      "public let bitcountTrailingZero : (x : Int32) -> Int32",
      "public func bitflip(x : Int32, p : Nat) : Int32",
      "public func bitnot(x : Int32) : Int32",
      "public func bitor(x : Int32, y : Int32) : Int32",
      "public func bitrotLeft(x : Int32, y : Int32) : Int32",
      "public func bitrotRight(x : Int32, y : Int32) : Int32",
      "public func bitset(x : Int32, p : Nat) : Int32",
      "public func bitshiftLeft(x : Int32, y : Int32) : Int32",
      "public func bitshiftRight(x : Int32, y : Int32) : Int32",
      "public func bittest(x : Int32, p : Nat) : Bool",
      "public func bitxor(x : Int32, y : Int32) : Int32",
      "public func compare(x : Int32, y : Int32) : Order.Order",
      "public func div(x : Int32, y : Int32) : Int32",
      "public func equal(x : Int32, y : Int32) : Bool",
      "public let fromInt : Int -> Int32",
      "public let fromInt16 : Int16 -> Int32",
      "public let fromInt64 : Int64 -> Int32",
      "public let fromIntWrap : Int -> Int32",
      "public let fromNat32 : Nat32 -> Int32",
      "public func greater(x : Int32, y : Int32) : Bool",
      "public func greaterOrEqual(x : Int32, y : Int32) : Bool",
      "public type Int32",
      "public func less(x : Int32, y : Int32) : Bool",
      "public func lessOrEqual(x : Int32, y : Int32) : Bool",
      "public func max(x : Int32, y : Int32) : Int32",
      "public let maxValue : Int32",
      "public func min(x : Int32, y : Int32) : Int32",
      "public let minValue : Int32",
      "public func mul(x : Int32, y : Int32) : Int32",
      "public func mulWrap(x : Int32, y : Int32) : Int32",
      "public func neg(x : Int32) : Int32",
      "public func notEqual(x : Int32, y : Int32) : Bool",
      "public func pow(x : Int32, y : Int32) : Int32",
      "public func powWrap(x : Int32, y : Int32) : Int32",
      "public func range(fromInclusive : Int32, toExclusive : Int32) : Iter.Iter<Int32>",
      "public func rangeInclusive(from : Int32, to : Int32) : Iter.Iter<Int32>",
      "public func rem(x : Int32, y : Int32) : Int32",
      "public func sub(x : Int32, y : Int32) : Int32",
      "public func subWrap(x : Int32, y : Int32) : Int32",
      "public let toInt : Int32 -> Int",
      "public let toInt16 : Int32 -> Int16",
      "public let toInt64 : Int32 -> Int64",
      "public let toNat32 : Int32 -> Nat32",
      "public func toText(x : Int32) : Text"
    ]
  },
  {
    "name": "Int64",
    "exports": [
      "public func abs(x : Int64) : Int64",
      "public func add(x : Int64, y : Int64) : Int64",
      "public func addWrap(x : Int64, y : Int64) : Int64",
      "public func allValues() : Iter.Iter<Int64>",
      "public func bitand(x : Int64, y : Int64) : Int64",
      "public func bitclear(x : Int64, p : Nat) : Int64",
      "public let bitcountLeadingZero : (x : Int64) -> Int64",
      "public let bitcountNonZero : (x : Int64) -> Int64",
      "public let bitcountTrailingZero : (x : Int64) -> Int64",
      "public func bitflip(x : Int64, p : Nat) : Int64",
      "public func bitnot(x : Int64) : Int64",
      "public func bitor(x : Int64, y : Int64) : Int64",
      "public func bitrotLeft(x : Int64, y : Int64) : Int64",
      "public func bitrotRight(x : Int64, y : Int64) : Int64",
      "public func bitset(x : Int64, p : Nat) : Int64",
      "public func bitshiftLeft(x : Int64, y : Int64) : Int64",
      "public func bitshiftRight(x : Int64, y : Int64) : Int64",
      "public func bittest(x : Int64, p : Nat) : Bool",
      "public func bitxor(x : Int64, y : Int64) : Int64",
      "public func compare(x : Int64, y : Int64) : Order.Order",
      "public func div(x : Int64, y : Int64) : Int64",
      "public func equal(x : Int64, y : Int64) : Bool",
      "public let fromInt : Int -> Int64",
      "public let fromInt32 : Int32 -> Int64",
      "public let fromIntWrap : Int -> Int64",
      "public let fromNat64 : Nat64 -> Int64",
      "public func greater(x : Int64, y : Int64) : Bool",
      "public func greaterOrEqual(x : Int64, y : Int64) : Bool",
      "public type Int64",
      "public func less(x : Int64, y : Int64) : Bool",
      "public func lessOrEqual(x : Int64, y : Int64) : Bool",
      "public func max(x : Int64, y : Int64) : Int64",
      "public let maxValue : Int64",
      "public func min(x : Int64, y : Int64) : Int64",
      "public let minValue : Int64",
      "public func mul(x : Int64, y : Int64) : Int64",
      "public func mulWrap(x : Int64, y : Int64) : Int64",
      "public func neg(x : Int64) : Int64",
      "public func notEqual(x : Int64, y : Int64) : Bool",
      "public func pow(x : Int64, y : Int64) : Int64",
      "public func powWrap(x : Int64, y : Int64) : Int64",
      "public func range(fromInclusive : Int64, toExclusive : Int64) : Iter.Iter<Int64>",
      "public func rangeInclusive(from : Int64, to : Int64) : Iter.Iter<Int64>",
      "public func rem(x : Int64, y : Int64) : Int64",
      "public func sub(x : Int64, y : Int64) : Int64",
      "public func subWrap(x : Int64, y : Int64) : Int64",
      "public let toInt : Int64 -> Int",
      "public let toInt32 : Int64 -> Int32",
      "public let toNat64 : Int64 -> Nat64",
      "public func toText(x : Int64) : Text"
    ]
  },
  {
    "name": "Int8",
    "exports": [
      "public func abs(x : Int8) : Int8",
      "public func add(x : Int8, y : Int8) : Int8",
      "public func addWrap(x : Int8, y : Int8) : Int8",
      "public func allValues() : Iter.Iter<Int8>",
      "public func bitand(x : Int8, y : Int8) : Int8",
      "public func bitclear(x : Int8, p : Nat) : Int8",
      "public let bitcountLeadingZero : (x : Int8) -> Int8",
      "public let bitcountNonZero : (x : Int8) -> Int8",
      "public let bitcountTrailingZero : (x : Int8) -> Int8",
      "public func bitflip(x : Int8, p : Nat) : Int8",
      "public func bitnot(x : Int8) : Int8",
      "public func bitor(x : Int8, y : Int8) : Int8",
      "public func bitrotLeft(x : Int8, y : Int8) : Int8",
      "public func bitrotRight(x : Int8, y : Int8) : Int8",
      "public func bitset(x : Int8, p : Nat) : Int8",
      "public func bitshiftLeft(x : Int8, y : Int8) : Int8",
      "public func bitshiftRight(x : Int8, y : Int8) : Int8",
      "public func bittest(x : Int8, p : Nat) : Bool",
      "public func bitxor(x : Int8, y : Int8) : Int8",
      "public func compare(x : Int8, y : Int8) : Order.Order",
      "public func div(x : Int8, y : Int8) : Int8",
      "public func equal(x : Int8, y : Int8) : Bool",
      "public let fromInt : Int -> Int8",
      "public let fromInt16 : Int16 -> Int8",
      "public let fromIntWrap : Int -> Int8",
      "public let fromNat8 : Nat8 -> Int8",
      "public func greater(x : Int8, y : Int8) : Bool",
      "public func greaterOrEqual(x : Int8, y : Int8) : Bool",
      "public type Int8",
      "public func less(x : Int8, y : Int8) : Bool",
      "public func lessOrEqual(x : Int8, y : Int8) : Bool",
      "public func max(x : Int8, y : Int8) : Int8",
      "public let maxValue : Int8",
      "public func min(x : Int8, y : Int8) : Int8",
      "public let minValue : Int8",
      "public func mul(x : Int8, y : Int8) : Int8",
      "public func mulWrap(x : Int8, y : Int8) : Int8",
      "public func neg(x : Int8) : Int8",
      "public func notEqual(x : Int8, y : Int8) : Bool",
      "public func pow(x : Int8, y : Int8) : Int8",
      "public func powWrap(x : Int8, y : Int8) : Int8",
      "public func range(fromInclusive : Int8, toExclusive : Int8) : Iter.Iter<Int8>",
      "public func rangeInclusive(from : Int8, to : Int8) : Iter.Iter<Int8>",
      "public func rem(x : Int8, y : Int8) : Int8",
      "public func sub(x : Int8, y : Int8) : Int8",
      "public func subWrap(x : Int8, y : Int8) : Int8",
      "public let toInt : Int8 -> Int",
      "public let toInt16 : Int8 -> Int16",
      "public let toNat8 : Int8 -> Nat8",
      "public func toText(x : Int8) : Text"
    ]
  },
  {
    "name": "InternetComputer",
    "exports": [
      "public let call : (canister : Principal, name : Text, data : Blob) -> async (reply : Blob)",
      "public func countInstructions(comp : () -> ()) : Nat64",
      "public let isReplicated : () -> Bool",
      "public let performanceCounter : (counter : Nat32) -> (value : Nat64)",
      "public func replyDeadline() : ?Nat"
    ]
  },
  {
    "name": "Iter",
    "exports": [
      "public func all<T>(iter : Iter<T>, f : T -> Bool) : Bool",
      "public func any<T>(iter : Iter<T>, f : T -> Bool) : Bool",
      "public func concat<T>(a : Iter<T>, b : Iter<T>) : Iter<T>",
      "public func contains<T>(iter : Iter<T>, equal : (T, T) -> Bool, value : T) : Bool",
      "public func drop<T>(iter : Iter<T>, n : Nat) : Iter<T>",
      "public func dropWhile<T>(iter : Iter<T>, f : T -> Bool) : Iter<T>",
      "public func empty<T>() : Iter<T>",
      "public func enumerate<T>(iter : Iter<T>) : Iter<(Nat, T)>",
      "public func filter<T>(iter : Iter<T>, f : T -> Bool) : Iter<T>",
      "public func filterMap<T, R>(iter : Iter<T>, f : T -> ?R) : Iter<R>",
      "public func find<T>(iter : Iter<T>, f : T -> Bool) : ?T",
      "public func findIndex<T>(iter : Iter<T>, predicate : T -> Bool) : ?Nat",
      "public func flatMap<T, R>(iter : Iter<T>, f : T -> Iter<R>) : Iter<R>",
      "public func flatten<T>(iter : Iter<Iter<T>>) : Iter<T>",
      "public func foldLeft<T, R>(iter : Iter<T>, initial : R, combine : (R, T) -> R) : R",
      "public func foldRight<T, R>(iter : Iter<T>, initial : R, combine : (T, R) -> R) : R",
      "public func forEach<T>( iter : Iter<T>, f : (T) -> () )",
      "public func fromArray<T>(array : [T]) : Iter<T>",
      "public func fromVarArray<T>(array : [var T]) : Iter<T>",
      "public func infinite<T>(item : T) : Iter<T>",
      "public type Iter<T>",
      "public func map<T, R>(iter : Iter<T>, f : T -> R) : Iter<R>",
      "public func max<T>(iter : Iter<T>, compare : (T, T) -> Order.Order) : ?T",
      "public func min<T>(iter : Iter<T>, compare : (T, T) -> Order.Order) : ?T",
      "public func reduce<T>(iter : Iter<T>, combine : (T, T) -> T) : ?T",
      "public func repeat<T>(item : T, count : Nat) : Iter<T>",
      "public func reverse<T>(iter : Iter<T>) : Iter<T>",
      "public func scanLeft<T, R>(iter : Iter<T>, initial : R, combine : (R, T) -> R) : Iter<R>",
      "public func scanRight<T, R>(iter : Iter<T>, initial : R, combine : (T, R) -> R) : Iter<R>",
      "public func singleton<T>(value : T) : Iter<T>",
      "public func size<T>(iter : Iter<T>) : Nat",
      "public func sort<T>(iter : Iter<T>, compare : (T, T) -> Order.Order) : Iter<T>",
      "public func step<T>(iter : Iter<T>, n : Nat) : Iter<T>",
      "public func take<T>(iter : Iter<T>, n : Nat) : Iter<T>",
      "public func takeWhile<T>(iter : Iter<T>, f : T -> Bool) : Iter<T>",
      "public func toArray<T>(iter : Iter<T>) : [T]",
      "public func toVarArray<T>(iter : Iter<T>) : [var T]",
      "public func unfold<T, S>(initial : S, step : S -> ?(T, S)) : Iter<T>",
      "public func zip<A, B>(a : Iter<A>, b : Iter<B>) : Iter<(A, B)>",
      "public func zip3<A, B, C>(a : Iter<A>, b : Iter<B>, c : Iter<C>) : Iter<(A, B, C)>",
      "public func zipWith<A, B, R>(a : Iter<A>, b : Iter<B>, f : (A, B) -> R) : Iter<R>",
      "public func zipWith3<A, B, C, R>(a : Iter<A>, b : Iter<B>, c : Iter<C>, f : (A, B, C) -> R) : Iter<R>"
    ]
  },
  {
    "name": "List",
    "exports": [
      "public func add<T>(list : List<T>, element : T)",
      "public func addAll<T>(list : List<T>, iter : Iter.Iter<T>)",
      "public func addRepeat<T>(list : List<T>, initValue : T, count : Nat)",
      "public func all<T>(list : List<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(list : List<T>, predicate : T -> Bool) : Bool",
      "public func append<T>(list : List<T>, added : List<T>)",
      "public func clear<T>(list : List<T>)",
      "public func clone<T>(list : List<T>) : List<T>",
      "public func compare<T>(list1 : List<T>, list2 : List<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func concat<T>(lists : [List<T>]) : List<T>",
      "public func concatSlices<T>(slices : [(List<T>, fromInclusive : Nat, toExclusive : Nat)]) : List<T>",
      "public func contains<T>(list : List<T>, equal : (T, T) -> Bool, element : T) : Bool",
      "public func deduplicate<T>(list : List<T>, equal : (T, T) -> Bool)",
      "public func empty<T>() : List<T>",
      "public func enumerate<T>(list : List<T>) : Iter.Iter<(Nat, T)>",
      "public func equal<T>(list1 : List<T>, list2 : List<T>, equal : (T, T) -> Bool) : Bool",
      "public func fill<T>(list : List<T>, value : T)",
      "public func fillWith<T>(list : List<T>, generator : Nat -> T)",
      "public func filter<T>(list : List<T>, predicate : T -> Bool) : List<T>",
      "public func filterMap<T, R>(list : List<T>, f : T -> ?R) : List<R>",
      "public func find<T>(list : List<T>, predicate : T -> Bool) : ?T",
      "public func findIndex<T>(list : List<T>, predicate : T -> Bool) : ?Nat",
      "public func findLastIndex<T>(list : List<T>, predicate : T -> Bool) : ?Nat",
      "public func first<T>(list : List<T>) : ?T",
      "public func flatMap<T, R>(list : List<T>, k : T -> Iter.Iter<R>) : List<R>",
      "public func flatten<T>(lists : List<List<T>>) : List<T>",
      "public func foldLeft<A, T>(list : List<T>, base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(list : List<T>, base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(list : List<T>, f : T -> ())",
      "public func forEachEntry<T>(list : List<T>, f : (Nat, T) -> ())",
      "public func forEachRange<T>(list : List<T>, f : T -> (), fromInclusive : Nat, toExclusive : Nat)",
      "public func fromArray<T>(array : [T]) : List<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : List<T>",
      "public func fromPure<T>(pure : PureList.List<T>) : List<T>",
      "public func fromVarArray<T>(array : [var T]) : List<T>",
      "public func get<T>(list : List<T>, index : Nat) : T",
      "public func getOpt<T>(list : List<T>, index : Nat) : ?T",
      "public func indexOf<T>(list : List<T>, equal : (T, T) -> Bool, element : T) : ?Nat",
      "public func insert<T>(list : List<T>, index : Nat, element : T)",
      "public func isEmpty<T>(list : List<T>) : Bool",
      "public func isSorted<T>(list : List<T>, compare : (T, T) -> Order.Order) : Bool",
      "public func join<T>(lists : Iter.Iter<List<T>>) : List<T>",
      "public func keys<T>(list : List<T>) : Iter.Iter<Nat>",
      "public func last<T>(list : List<T>) : ?T",
      "public func lastIndexOf<T>(list : List<T>, equal : (T, T) -> Bool, element : T) : ?Nat",
      "public type List<T>",
      "public func map<T, R>(list : List<T>, f : T -> R) : List<R>",
      "public func mapEntries<T, R>(list : List<T>, f : (T, Nat) -> R) : List<R>",
      "public func mapInPlace<T>(list : List<T>, f : T -> T)",
      "public func mapResult<T, R, E>(list : List<T>, f : T -> Result.Result<R, E>) : Result.Result<List<R>, E>",
      "public func max<T>(list : List<T>, compare : (T, T) -> Order.Order) : ?T",
      "public func min<T>(list : List<T>, compare : (T, T) -> Order.Order) : ?T",
      "public func nextIndexOf<T>(list : List<T>, element : T, fromInclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func prevIndexOf<T>(list : List<T>, element : T, fromExclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func put<T>(list : List<T>, index : Nat, value : T)",
      "public func range<T>(list : List<T>, fromInclusive : Int, toExclusive : Int) : Iter.Iter<T>",
      "public func remove<T>(list : List<T>, index : Nat) : T",
      "public func removeLast<T>(list : List<T>) : ?T",
      "public func repeat<T>(initValue : T, size : Nat) : List<T>",
      "public func retain<T>(list : List<T>, predicate : T -> Bool)",
      "public func reverse<T>(list : List<T>) : List<T>",
      "public func reverseEnumerate<T>(list : List<T>) : Iter.Iter<(Nat, T)>",
      "public func reverseForEach<T>(list : List<T>, f : T -> ())",
      "public func reverseForEachEntry<T>(list : List<T>, f : (Nat, T) -> ())",
      "public func reverseInPlace<T>(list : List<T>)",
      "public func reverseValues<T>(list : List<T>) : Iter.Iter<T>",
      "public func singleton<T>(element : T) : List<T>",
      "public func size<T>( list : { var blockIndex : Nat; var elementIndex : Nat } ) : Nat",
      "public func sliceToArray<T>(list : List<T>, fromInclusive : Int, toExclusive : Int) : [T]",
      "public func sort<T>(list : List<T>, compare : (T, T) -> Order.Order) : List<T>",
      "public func sortInPlace<T>(list : List<T>, compare : (T, T) -> Order.Order)",
      "public func tabulate<T>(size : Nat, generator : Nat -> T) : List<T>",
      "public func toArray<T>(list : List<T>) : [T]",
      "public func toPure<T>(list : List<T>) : PureList.List<T>",
      "public func toText<T>(list : List<T>, f : T -> Text) : Text",
      "public func toVarArray<T>(list : List<T>) : [var T]",
      "public func truncate<T>(list : List<T>, newSize : Nat)",
      "public func values<T>(list : List<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "Map",
    "exports": [
      "public func add<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V)",
      "public func all<K, V>(map : Map<K, V>, predicate : (K, V) -> Bool) : Bool",
      "public func any<K, V>(map : Map<K, V>, predicate : (K, V) -> Bool) : Bool",
      "public func assertValid<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order)",
      "public func clear<K, V>(map : Map<K, V>)",
      "public func clone<K, V>(map : Map<K, V>) : Map<K, V>",
      "public func compare<K, V>(map1 : Map<K, V>, map2 : Map<K, V>, compareKey : (K, K) -> Order.Order, compareValue : (V, V) -> Order.Order) : Order.Order",
      "public func containsKey<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : Bool",
      "public func delete<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : Bool",
      "public func empty<K, V>() : Map<K, V>",
      "public func entries<K, V>(map : Map<K, V>) : Types.Iter<(K, V)>",
      "public func entriesFrom<K, V>( map : Map<K, V>, compare : (K, K) -> Order.Order, key : K ) : Types.Iter<(K, V)>",
      "public func equal<K, V>(map1 : Map<K, V>, map2 : Map<K, V>, compareKeys : (K, K) -> Types.Order, equalValues : (V, V) -> Bool) : Bool",
      "public func filter<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, criterion : (K, V) -> Bool) : Map<K, V>",
      "public func filterMap<K, V1, V2>(map : Map<K, V1>, compare : (K, K) -> Order.Order, project : (K, V1) -> ?V2) : Map<K, V2>",
      "public func foldLeft<K, V, A>( map : Map<K, V>, base : A, combine : (A, K, V) -> A ) : A",
      "public func foldRight<K, V, A>( map : Map<K, V>, base : A, combine : (K, V, A) -> A ) : A",
      "public func forEach<K, V>(map : Map<K, V>, operation : (K, V) -> ())",
      "public func fromIter<K, V>(iter : Types.Iter<(K, V)>, compare : (K, K) -> Order.Order) : Map<K, V>",
      "public func fromPure<K, V>(map : PureMap.Map<K, V>, compare : (K, K) -> Order.Order) : Map<K, V>",
      "public func get<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : ?V",
      "public func insert<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : Bool",
      "public func isEmpty<K, V>(map : Map<K, V>) : Bool",
      "public func keys<K, V>(map : Map<K, V>) : Types.Iter<K>",
      "public func map<K, V1, V2>(map : Map<K, V1>, project : (K, V1) -> V2) : Map<K, V2>",
      "public type Map<K, V>",
      "public func maxEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func minEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func remove<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K)",
      "public func replace<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : ?V",
      "public func reverseEntries<K, V>(map : Map<K, V>) : Types.Iter<(K, V)>",
      "public func reverseEntriesFrom<K, V>( map : Map<K, V>, compare : (K, K) -> Order.Order, key : K ) : Types.Iter<(K, V)>",
      "public func singleton<K, V>(key : K, value : V) : Map<K, V>",
      "public func size<K, V>(map : Map<K, V>) : Nat",
      "public func swap<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : ?V",
      "public func take<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : ?V",
      "public func toPure<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order) : PureMap.Map<K, V>",
      "public func toText<K, V>(map : Map<K, V>, keyFormat : K -> Text, valueFormat : V -> Text) : Text",
      "public func values<K, V>(map : Map<K, V>) : Types.Iter<V>"
    ]
  },
  {
    "name": "Nat",
    "exports": [
      "public func add(x : Nat, y : Nat) : Nat",
      "public func allValues() : Iter.Iter<Nat>",
      "public func bitshiftLeft(x : Nat, y : Nat32) : Nat",
      "public func bitshiftRight(x : Nat, y : Nat32) : Nat",
      "public func compare(x : Nat, y : Nat) : Order.Order",
      "public func div(x : Nat, y : Nat) : Nat",
      "public func equal(x : Nat, y : Nat) : Bool",
      "public func fromInt(int : Int) : Nat",
      "public func fromText(text : Text) : ?Nat",
      "public func greater(x : Nat, y : Nat) : Bool",
      "public func greaterOrEqual(x : Nat, y : Nat) : Bool",
      "public func less(x : Nat, y : Nat) : Bool",
      "public func lessOrEqual(x : Nat, y : Nat) : Bool",
      "public func max(x : Nat, y : Nat) : Nat",
      "public func min(x : Nat, y : Nat) : Nat",
      "public func mul(x : Nat, y : Nat) : Nat",
      "public type Nat",
      "public func notEqual(x : Nat, y : Nat) : Bool",
      "public func pow(x : Nat, y : Nat) : Nat",
      "public func range(fromInclusive : Nat, toExclusive : Nat) : Iter.Iter<Nat>",
      "public func rangeBy(fromInclusive : Nat, toExclusive : Nat, step : Int) : Iter.Iter<Nat>",
      "public func rangeByInclusive(from : Nat, to : Nat, step : Int) : Iter.Iter<Nat>",
      "public func rangeInclusive(from : Nat, to : Nat) : Iter.Iter<Nat>",
      "public func rem(x : Nat, y : Nat) : Nat",
      "public func sub(x : Nat, y : Nat) : Nat",
      "public func toInt(nat : Nat) : Int",
      "public func toText(n : Nat) : Text"
    ]
  },
  {
    "name": "Nat16",
    "exports": [
      "public func add(x : Nat16, y : Nat16) : Nat16",
      "public func addWrap(x : Nat16, y : Nat16) : Nat16",
      "public func allValues() : Iter.Iter<Nat16>",
      "public func bitand(x : Nat16, y : Nat16) : Nat16",
      "public func bitclear(x : Nat16, p : Nat) : Nat16",
      "public let bitcountLeadingZero : (x : Nat16) -> Nat16",
      "public let bitcountNonZero : (x : Nat16) -> Nat16",
      "public let bitcountTrailingZero : (x : Nat16) -> Nat16",
      "public func bitflip(x : Nat16, p : Nat) : Nat16",
      "public func bitnot(x : Nat16) : Nat16",
      "public func bitor(x : Nat16, y : Nat16) : Nat16",
      "public func bitrotLeft(x : Nat16, y : Nat16) : Nat16",
      "public func bitrotRight(x : Nat16, y : Nat16) : Nat16",
      "public func bitset(x : Nat16, p : Nat) : Nat16",
      "public func bitshiftLeft(x : Nat16, y : Nat16) : Nat16",
      "public func bitshiftRight(x : Nat16, y : Nat16) : Nat16",
      "public func bittest(x : Nat16, p : Nat) : Bool",
      "public func bitxor(x : Nat16, y : Nat16) : Nat16",
      "public func compare(x : Nat16, y : Nat16) : Order.Order",
      "public func div(x : Nat16, y : Nat16) : Nat16",
      "public func equal(x : Nat16, y : Nat16) : Bool",
      "public let fromIntWrap : Int -> Nat16",
      "public let fromNat : Nat -> Nat16",
      "public func fromNat32(x : Nat32) : Nat16",
      "public func fromNat8(x : Nat8) : Nat16",
      "public func greater(x : Nat16, y : Nat16) : Bool",
      "public func greaterOrEqual(x : Nat16, y : Nat16) : Bool",
      "public func less(x : Nat16, y : Nat16) : Bool",
      "public func lessOrEqual(x : Nat16, y : Nat16) : Bool",
      "public func max(x : Nat16, y : Nat16) : Nat16",
      "public let maxValue : Nat16",
      "public func min(x : Nat16, y : Nat16) : Nat16",
      "public func mul(x : Nat16, y : Nat16) : Nat16",
      "public func mulWrap(x : Nat16, y : Nat16) : Nat16",
      "public type Nat16",
      "public func notEqual(x : Nat16, y : Nat16) : Bool",
      "public func pow(x : Nat16, y : Nat16) : Nat16",
      "public func powWrap(x : Nat16, y : Nat16) : Nat16",
      "public func range(fromInclusive : Nat16, toExclusive : Nat16) : Iter.Iter<Nat16>",
      "public func rangeInclusive(from : Nat16, to : Nat16) : Iter.Iter<Nat16>",
      "public func rem(x : Nat16, y : Nat16) : Nat16",
      "public func sub(x : Nat16, y : Nat16) : Nat16",
      "public func subWrap(x : Nat16, y : Nat16) : Nat16",
      "public let toNat : Nat16 -> Nat",
      "public func toNat32(x : Nat16) : Nat32",
      "public func toNat8(x : Nat16) : Nat8",
      "public func toText(x : Nat16) : Text"
    ]
  },
  {
    "name": "Nat32",
    "exports": [
      "public func add(x : Nat32, y : Nat32) : Nat32",
      "public func addWrap(x : Nat32, y : Nat32) : Nat32",
      "public func allValues() : Iter.Iter<Nat32>",
      "public func bitand(x : Nat32, y : Nat32) : Nat32",
      "public func bitclear(x : Nat32, p : Nat) : Nat32",
      "public let bitcountLeadingZero : (x : Nat32) -> Nat32",
      "public let bitcountNonZero : (x : Nat32) -> Nat32",
      "public let bitcountTrailingZero : (x : Nat32) -> Nat32",
      "public func bitflip(x : Nat32, p : Nat) : Nat32",
      "public func bitnot(x : Nat32) : Nat32",
      "public func bitor(x : Nat32, y : Nat32) : Nat32",
      "public func bitrotLeft(x : Nat32, y : Nat32) : Nat32",
      "public func bitrotRight(x : Nat32, y : Nat32) : Nat32",
      "public func bitset(x : Nat32, p : Nat) : Nat32",
      "public func bitshiftLeft(x : Nat32, y : Nat32) : Nat32",
      "public func bitshiftRight(x : Nat32, y : Nat32) : Nat32",
      "public func bittest(x : Nat32, p : Nat) : Bool",
      "public func bitxor(x : Nat32, y : Nat32) : Nat32",
      "public func compare(x : Nat32, y : Nat32) : Order.Order",
      "public func div(x : Nat32, y : Nat32) : Nat32",
      "public func equal(x : Nat32, y : Nat32) : Bool",
      "public let fromIntWrap : Int -> Nat32",
      "public let fromNat : Nat -> Nat32",
      "public func fromNat16(x : Nat16) : Nat32",
      "public func fromNat64(x : Nat64) : Nat32",
      "public func greater(x : Nat32, y : Nat32) : Bool",
      "public func greaterOrEqual(x : Nat32, y : Nat32) : Bool",
      "public func less(x : Nat32, y : Nat32) : Bool",
      "public func lessOrEqual(x : Nat32, y : Nat32) : Bool",
      "public func max(x : Nat32, y : Nat32) : Nat32",
      "public let maxValue : Nat32",
      "public func min(x : Nat32, y : Nat32) : Nat32",
      "public func mul(x : Nat32, y : Nat32) : Nat32",
      "public func mulWrap(x : Nat32, y : Nat32) : Nat32",
      "public type Nat32",
      "public func notEqual(x : Nat32, y : Nat32) : Bool",
      "public func pow(x : Nat32, y : Nat32) : Nat32",
      "public func powWrap(x : Nat32, y : Nat32) : Nat32",
      "public func range(fromInclusive : Nat32, toExclusive : Nat32) : Iter.Iter<Nat32>",
      "public func rangeInclusive(from : Nat32, to : Nat32) : Iter.Iter<Nat32>",
      "public func rem(x : Nat32, y : Nat32) : Nat32",
      "public func sub(x : Nat32, y : Nat32) : Nat32",
      "public func subWrap(x : Nat32, y : Nat32) : Nat32",
      "public let toNat : Nat32 -> Nat",
      "public func toNat16(x : Nat32) : Nat16",
      "public func toNat64(x : Nat32) : Nat64",
      "public func toText(x : Nat32) : Text"
    ]
  },
  {
    "name": "Nat64",
    "exports": [
      "public func add(x : Nat64, y : Nat64) : Nat64",
      "public func addWrap(x : Nat64, y : Nat64) : Nat64",
      "public func allValues() : Iter.Iter<Nat64>",
      "public func bitand(x : Nat64, y : Nat64) : Nat64",
      "public func bitclear(x : Nat64, p : Nat) : Nat64",
      "public let bitcountLeadingZero : (x : Nat64) -> Nat64",
      "public let bitcountNonZero : (x : Nat64) -> Nat64",
      "public let bitcountTrailingZero : (x : Nat64) -> Nat64",
      "public func bitflip(x : Nat64, p : Nat) : Nat64",
      "public func bitnot(x : Nat64) : Nat64",
      "public func bitor(x : Nat64, y : Nat64) : Nat64",
      "public func bitrotLeft(x : Nat64, y : Nat64) : Nat64",
      "public func bitrotRight(x : Nat64, y : Nat64) : Nat64",
      "public func bitset(x : Nat64, p : Nat) : Nat64",
      "public func bitshiftLeft(x : Nat64, y : Nat64) : Nat64",
      "public func bitshiftRight(x : Nat64, y : Nat64) : Nat64",
      "public func bittest(x : Nat64, p : Nat) : Bool",
      "public func bitxor(x : Nat64, y : Nat64) : Nat64",
      "public func compare(x : Nat64, y : Nat64) : Order.Order",
      "public func div(x : Nat64, y : Nat64) : Nat64",
      "public func equal(x : Nat64, y : Nat64) : Bool",
      "public let fromIntWrap : Int -> Nat64",
      "public let fromNat : Nat -> Nat64",
      "public func fromNat32(x : Nat32) : Nat64",
      "public func greater(x : Nat64, y : Nat64) : Bool",
      "public func greaterOrEqual(x : Nat64, y : Nat64) : Bool",
      "public func less(x : Nat64, y : Nat64) : Bool",
      "public func lessOrEqual(x : Nat64, y : Nat64) : Bool",
      "public func max(x : Nat64, y : Nat64) : Nat64",
      "public let maxValue : Nat64",
      "public func min(x : Nat64, y : Nat64) : Nat64",
      "public func mul(x : Nat64, y : Nat64) : Nat64",
      "public func mulWrap(x : Nat64, y : Nat64) : Nat64",
      "public type Nat64",
      "public func notEqual(x : Nat64, y : Nat64) : Bool",
      "public func pow(x : Nat64, y : Nat64) : Nat64",
      "public func powWrap(x : Nat64, y : Nat64) : Nat64",
      "public func range(fromInclusive : Nat64, toExclusive : Nat64) : Iter.Iter<Nat64>",
      "public func rangeInclusive(from : Nat64, to : Nat64) : Iter.Iter<Nat64>",
      "public func rem(x : Nat64, y : Nat64) : Nat64",
      "public func sub(x : Nat64, y : Nat64) : Nat64",
      "public func subWrap(x : Nat64, y : Nat64) : Nat64",
      "public let toNat : Nat64 -> Nat",
      "public func toNat32(x : Nat64) : Nat32",
      "public func toText(x : Nat64) : Text"
    ]
  },
  {
    "name": "Nat8",
    "exports": [
      "public func add(x : Nat8, y : Nat8) : Nat8",
      "public func addWrap(x : Nat8, y : Nat8) : Nat8",
      "public func allValues() : Iter.Iter<Nat8>",
      "public func bitand(x : Nat8, y : Nat8) : Nat8",
      "public func bitclear(x : Nat8, p : Nat) : Nat8",
      "public let bitcountLeadingZero : (x : Nat8) -> Nat8",
      "public let bitcountNonZero : (x : Nat8) -> Nat8",
      "public let bitcountTrailingZero : (x : Nat8) -> Nat8",
      "public func bitflip(x : Nat8, p : Nat) : Nat8",
      "public func bitnot(x : Nat8) : Nat8",
      "public func bitor(x : Nat8, y : Nat8) : Nat8",
      "public func bitrotLeft(x : Nat8, y : Nat8) : Nat8",
      "public func bitrotRight(x : Nat8, y : Nat8) : Nat8",
      "public func bitset(x : Nat8, p : Nat) : Nat8",
      "public func bitshiftLeft(x : Nat8, y : Nat8) : Nat8",
      "public func bitshiftRight(x : Nat8, y : Nat8) : Nat8",
      "public func bittest(x : Nat8, p : Nat) : Bool",
      "public func bitxor(x : Nat8, y : Nat8) : Nat8",
      "public func compare(x : Nat8, y : Nat8) : Order.Order",
      "public func div(x : Nat8, y : Nat8) : Nat8",
      "public func equal(x : Nat8, y : Nat8) : Bool",
      "public let fromIntWrap : Int -> Nat8",
      "public let fromNat : Nat -> Nat8",
      "public let fromNat16 : Nat16 -> Nat8",
      "public func greater(x : Nat8, y : Nat8) : Bool",
      "public func greaterOrEqual(x : Nat8, y : Nat8) : Bool",
      "public func less(x : Nat8, y : Nat8) : Bool",
      "public func lessOrEqual(x : Nat8, y : Nat8) : Bool",
      "public func max(x : Nat8, y : Nat8) : Nat8",
      "public let maxValue : Nat8",
      "public func min(x : Nat8, y : Nat8) : Nat8",
      "public func mul(x : Nat8, y : Nat8) : Nat8",
      "public func mulWrap(x : Nat8, y : Nat8) : Nat8",
      "public type Nat8",
      "public func notEqual(x : Nat8, y : Nat8) : Bool",
      "public func pow(x : Nat8, y : Nat8) : Nat8",
      "public func powWrap(x : Nat8, y : Nat8) : Nat8",
      "public func range(fromInclusive : Nat8, toExclusive : Nat8) : Iter.Iter<Nat8>",
      "public func rangeInclusive(from : Nat8, to : Nat8) : Iter.Iter<Nat8>",
      "public func rem(x : Nat8, y : Nat8) : Nat8",
      "public func sub(x : Nat8, y : Nat8) : Nat8",
      "public func subWrap(x : Nat8, y : Nat8) : Nat8",
      "public let toNat : Nat8 -> Nat",
      "public let toNat16 : Nat8 -> Nat16",
      "public func toText(x : Nat8) : Text"
    ]
  },
  {
    "name": "Option",
    "exports": [
      "public func apply<A, B>(x : ?A, f : ?(A -> B)) : ?B",
      "public func chain<A, B>(x : ?A, f : A -> ?B) : ?B",
      "public func compare<A>(x : ?A, y : ?A, cmp : (A, A) -> Types.Order) : Types.Order",
      "public func equal<A>(x : ?A, y : ?A, eq : (A, A) -> Bool) : Bool",
      "public func flatten<A>(x : ??A) : ?A",
      "public func forEach<A>(x : ?A, f : A -> ())",
      "public func get<T>(x : ?T, default : T) : T",
      "public func getMapped<A, B>(x : ?A, f : A -> B, default : B) : B",
      "public func isNull(x : ?Any) : Bool",
      "public func isSome(x : ?Any) : Bool",
      "public func map<A, B>(x : ?A, f : A -> B) : ?B",
      "public func some<A>(x : A) : ?A",
      "public func toText<A>(x : ?A, toText : A -> Text) : Text",
      "public func unwrap<T>(x : ?T) : T"
    ]
  },
  {
    "name": "Order",
    "exports": [
      "public func allValues() : Types.Iter<Order>",
      "public func equal(order1 : Order, order2 : Order) : Bool",
      "public func isEqual(order : Order) : Bool",
      "public func isGreater(order : Order) : Bool",
      "public func isLess(order : Order) : Bool",
      "public type Order"
    ]
  },
  {
    "name": "Principal",
    "exports": [
      "public func anonymous() : Principal",
      "public func compare(principal1 : Principal, principal2 : Principal) : { #less; #equal; #greater }",
      "public func equal(principal1 : Principal, principal2 : Principal) : Bool",
      "public func fromActor(a : actor",
      "public func fromBlob(b : Blob) : Principal",
      "public func fromText(t : Text) : Principal",
      "public func greater(principal1 : Principal, principal2 : Principal) : Bool",
      "public func greaterOrEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func hash(principal : Principal) : Types.Hash",
      "public func isAnonymous(p : Principal) : Bool",
      "public func isCanister(p : Principal) : Bool",
      "public func isController(p : Principal) : Bool",
      "public func isReserved(p : Principal) : Bool",
      "public func isSelfAuthenticating(p : Principal) : Bool",
      "public func less(principal1 : Principal, principal2 : Principal) : Bool",
      "public func lessOrEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func notEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public type Principal",
      "public func toBlob(p : Principal) : Blob",
      "public func toLedgerAccount(principal : Principal, subAccount : ?Blob) : Blob",
      "public func toText(p : Principal) : Text"
    ]
  },
  {
    "name": "Queue",
    "exports": [
      "public func all<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func clear<T>(queue : Queue<T>)",
      "public func clone<T>(queue : Queue<T>) : Queue<T>",
      "public func compare<T>(queue1 : Queue<T>, queue2 : Queue<T>, compareItem : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(queue : Queue<T>, equal : (T, T) -> Bool, element : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(queue1 : Queue<T>, queue2 : Queue<T>, equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(queue : Queue<T>, criterion : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(queue : Queue<T>, project : T -> ?U) : Queue<U>",
      "public func forEach<T>(queue : Queue<T>, operation : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>) : Queue<T>",
      "public func fromPure<T>(pureQueue : PureQueue.Queue<T>) : Queue<T>",
      "public func isEmpty<T>(queue : Queue<T>) : Bool",
      "public func map<T, U>(queue : Queue<T>, project : T -> U) : Queue<U>",
      "public func peekBack<T>(queue : Queue<T>) : ?T",
      "public func peekFront<T>(queue : Queue<T>) : ?T",
      "public func popBack<T>(queue : Queue<T>) : ?T",
      "public func popFront<T>(queue : Queue<T>) : ?T",
      "public func pushBack<T>(queue : Queue<T>, element : T)",
      "public func pushFront<T>(queue : Queue<T>, element : T)",
      "public type Queue<T>",
      "public func singleton<T>(element : T) : Queue<T>",
      "public func size<T>(queue : Queue<T>) : Nat",
      "public func toPure<T>(queue : Queue<T>) : PureQueue.Queue<T>",
      "public func toText<T>(queue : Queue<T>, format : T -> Text) : Text",
      "public func values<T>(queue : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "Random",
    "exports": [
      "public class AsyncRandom(state : State, generator : () -> async* Blob)",
      "public let blob : shared () -> async Blob",
      "public func crypto() : AsyncRandom",
      "public func cryptoFromState(state : State) : AsyncRandom",
      "public func emptyState() : State",
      "public class Random(state : State, generator : () -> Blob)",
      "public func seed(seed : Nat64) : Random",
      "public func seedFromState(state : SeedState) : Random",
      "public func seedState(seed : Nat64) : SeedState",
      "public type SeedState",
      "public type State"
    ]
  },
  {
    "name": "Region",
    "exports": [
      "public let grow : (region : Region, newPages : Nat64) -> (oldPages : Nat64)",
      "public let id : Region -> Nat",
      "public let loadBlob : (region : Region, offset : Nat64, size : Nat) -> Blob",
      "public let loadFloat : (region : Region, offset : Nat64) -> Float",
      "public let loadInt16 : (region : Region, offset : Nat64) -> Int16",
      "public let loadInt32 : (region : Region, offset : Nat64) -> Int32",
      "public let loadInt64 : (region : Region, offset : Nat64) -> Int64",
      "public let loadInt8 : (region : Region, offset : Nat64) -> Int8",
      "public let loadNat16 : (region : Region, offset : Nat64) -> Nat16",
      "public let loadNat32 : (region : Region, offset : Nat64) -> Nat32",
      "public let loadNat64 : (region : Region, offset : Nat64) -> Nat64",
      "public let loadNat8 : (region : Region, offset : Nat64) -> Nat8",
      "public let new : () -> Region",
      "public type Region",
      "public let size : (region : Region) -> (pages : Nat64)",
      "public let storeBlob : (region : Region, offset : Nat64, value : Blob) -> ()",
      "public let storeFloat : (region : Region, offset : Nat64, value : Float) -> ()",
      "public let storeInt16 : (region : Region, offset : Nat64, value : Int16) -> ()",
      "public let storeInt32 : (region : Region, offset : Nat64, value : Int32) -> ()",
      "public let storeInt64 : (region : Region, offset : Nat64, value : Int64) -> ()",
      "public let storeInt8 : (region : Region, offset : Nat64, value : Int8) -> ()",
      "public let storeNat16 : (region : Region, offset : Nat64, value : Nat16) -> ()",
      "public let storeNat32 : (region : Region, offset : Nat64, value : Nat32) -> ()",
      "public let storeNat64 : (region : Region, offset : Nat64, value : Nat64) -> ()",
      "public let storeNat8 : (region : Region, offset : Nat64, value : Nat8) -> ()"
    ]
  },
  {
    "name": "Result",
    "exports": [
      "public func assertErr(result : Result<Any, Any>)",
      "public func assertOk(result : Result<Any, Any>)",
      "public func chain<Ok1, Ok2, Err>( result : Result<Ok1, Err>, f : Ok1 -> Result<Ok2, Err> ) : Result<Ok2, Err>",
      "public func compare<Ok, Err>( result1 : Result<Ok, Err>, result2 : Result<Ok, Err>, compareOk : (Ok, Ok) -> Order.Order, compareErr : (Err, Err) -> Order.Order ) : Order.Order",
      "public func equal<Ok, Err>( result1 : Result<Ok, Err>, result2 : Result<Ok, Err>, equalOk : (Ok, Ok) -> Bool, equalErr : (Err, Err) -> Bool ) : Bool",
      "public func flatten<Ok, Err>( result : Result<Result<Ok, Err>, Err> ) : Result<Ok, Err>",
      "public func forErr<Ok, Err>(result : Result<Ok, Err>, f : Err -> ())",
      "public func forOk<Ok, Err>(result : Result<Ok, Err>, f : Ok -> ())",
      "public func fromOption<Ok, Err>(x : ?Ok, err : Err) : Result<Ok, Err>",
      "public func fromUpper<Ok, Err>( result : { #Ok : Ok; #Err : Err } ) : Result<Ok, Err>",
      "public func isErr(result : Result<Any, Any>) : Bool",
      "public func isOk(result : Result<Any, Any>) : Bool",
      "public func mapErr<Ok, Err1, Err2>( result : Result<Ok, Err1>, f : Err1 -> Err2 ) : Result<Ok, Err2>",
      "public func mapOk<Ok1, Ok2, Err>( result : Result<Ok1, Err>, f : Ok1 -> Ok2 ) : Result<Ok2, Err>",
      "public type Result<Ok, Err>",
      "public func toOption<Ok, Err>(result : Result<Ok, Err>) : ?Ok",
      "public func toUpper<Ok, Err>( result : Result<Ok, Err> ) : { #Ok : Ok; #Err : Err }"
    ]
  },
  {
    "name": "Runtime",
    "exports": [
      "public func trap(errorMessage : Text) : None",
      "public func unreachable() : None"
    ]
  },
  {
    "name": "Set",
    "exports": [
      "public func add<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T)",
      "public func addAll<T>(set : Set<T>, compare : (T, T) -> Order.Order, iter : Types.Iter<T>)",
      "public func all<T>(set : Set<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(set : Set<T>, predicate : T -> Bool) : Bool",
      "public func assertValid<T>(set : Set<T>, compare : (T, T) -> Order.Order)",
      "public func clear<T>(set : Set<T>)",
      "public func clone<T>(set : Set<T>) : Set<T>",
      "public func compare<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T) : Bool",
      "public func delete<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T) : Bool",
      "public func deleteAll<T>(set : Set<T>, compare : (T, T) -> Order.Order, iter : Types.Iter<T>) : Bool",
      "public func difference<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func empty<T>() : Set<T>",
      "public func equal<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Types.Order) : Bool",
      "public func filter<T>(set : Set<T>, compare : (T, T) -> Order.Order, criterion : T -> Bool) : Set<T>",
      "public func filterMap<T1, T2>(set : Set<T1>, compare : (T2, T2) -> Order.Order, project : T1 -> ?T2) : Set<T2>",
      "public func flatten<T>(setOfSets : Set<Set<T>>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func foldLeft<T, A>( set : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func foldRight<T, A>( set : Set<T>, base : A, combine : (T, A) -> A ) : A",
      "public func forEach<T>(set : Set<T>, operation : T -> ())",
      "public func fromIter<T>(iter : Types.Iter<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func fromPure<T>(set : PureSet.Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func insert<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T) : Bool",
      "public func insertAll<T>(set : Set<T>, compare : (T, T) -> Order.Order, iter : Types.Iter<T>) : Bool",
      "public func intersection<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func isEmpty<T>(set : Set<T>) : Bool",
      "public func isSubset<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Bool",
      "public func join<T>(setIterator : Types.Iter<Set<T>>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func map<T1, T2>(set : Set<T1>, compare : (T2, T2) -> Order.Order, project : T1 -> T2) : Set<T2>",
      "public func max<T>(set : Set<T>) : ?T",
      "public func min<T>(set : Set<T>) : ?T",
      "public func remove<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T) : ()",
      "public func retainAll<T>(set : Set<T>, compare : (T, T) -> Order.Order, predicate : T -> Bool) : Bool",
      "public func reverseValues<T>(set : Set<T>) : Types.Iter<T>",
      "public func reverseValuesFrom<T>( set : Set<T>, compare : (T, T) -> Order.Order, element : T ) : Types.Iter<T>",
      "public type Set<T>",
      "public func singleton<T>(element : T) : Set<T>",
      "public func size<T>(set : Set<T>) : Nat",
      "public func toPure<T>(set : Set<T>, compare : (T, T) -> Order.Order) : PureSet.Set<T>",
      "public func toText<T>(set : Set<T>, elementFormat : T -> Text) : Text",
      "public func union<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func values<T>(set : Set<T>) : Types.Iter<T>",
      "public func valuesFrom<T>( set : Set<T>, compare : (T, T) -> Order.Order, element : T ) : Types.Iter<T>"
    ]
  },
  {
    "name": "Stack",
    "exports": [
      "public func all<T>(stack : Stack<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(stack : Stack<T>, predicate : T -> Bool) : Bool",
      "public func clear<T>(stack : Stack<T>)",
      "public func clone<T>(stack : Stack<T>) : Stack<T>",
      "public func compare<T>(stack1 : Stack<T>, stack2 : Stack<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(stack : Stack<T>, element : T, equal : (T, T) -> Bool) : Bool",
      "public func empty<T>() : Stack<T>",
      "public func equal<T>(stack1 : Stack<T>, stack2 : Stack<T>, equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(stack : Stack<T>, predicate : T -> Bool) : Stack<T>",
      "public func filterMap<T, U>(stack : Stack<T>, project : T -> ?U) : Stack<U>",
      "public func forEach<T>(stack : Stack<T>, operation : T -> ())",
      "public func fromIter<T>(iter : Types.Iter<T>) : Stack<T>",
      "public func fromPure<T>(list : PureList.List<T>) : Stack<T>",
      "public func get<T>(stack : Stack<T>, position : Nat) : ?T",
      "public func isEmpty<T>(stack : Stack<T>) : Bool",
      "public func map<T, U>(stack : Stack<T>, project : T -> U) : Stack<U>",
      "public func peek<T>(stack : Stack<T>) : ?T",
      "public func pop<T>(stack : Stack<T>) : ?T",
      "public func push<T>(stack : Stack<T>, value : T)",
      "public func reverse<T>(stack : Stack<T>)",
      "public func singleton<T>(element : T) : Stack<T>",
      "public func size<T>(stack : Stack<T>) : Nat",
      "public type Stack<T>",
      "public func tabulate<T>(size : Nat, generator : Nat -> T) : Stack<T>",
      "public func toPure<T>(stack : Stack<T>) : PureList.List<T>",
      "public func toText<T>(stack : Stack<T>, format : T -> Text) : Text",
      "public func values<T>(stack : Stack<T>) : Types.Iter<T>"
    ]
  },
  {
    "name": "Text",
    "exports": [
      "public func compare(t1 : Text, t2 : Text) : Order.Order",
      "public func compareWith( t1 : Text, t2 : Text, cmp : (Char, Char) -> Order.Order ) : Order.Order",
      "public func concat(t1 : Text, t2 : Text) : Text",
      "public func contains(t : Text, p : Pattern) : Bool",
      "public let decodeUtf8 : Blob -> ?Text",
      "public let encodeUtf8 : Text -> Blob",
      "public func endsWith(t : Text, p : Pattern) : Bool",
      "public func equal(t1 : Text, t2 : Text) : Bool",
      "public func flatMap(t : Text, f : Char -> Text) : Text",
      "public func fromArray(a : [Char]) : Text",
      "public let fromChar : (c : Char) -> Text",
      "public func fromIter(cs : Iter.Iter<Char>) : Text",
      "public func fromVarArray(a : [var Char]) : Text",
      "public func greater(t1 : Text, t2 : Text) : Bool",
      "public func greaterOrEqual(t1 : Text, t2 : Text) : Bool",
      "public func isEmpty(t : Text) : Bool",
      "public func join(sep : Text, ts : Iter.Iter<Text>) : Text",
      "public func less(t1 : Text, t2 : Text) : Bool",
      "public func lessOrEqual(t1 : Text, t2 : Text) : Bool",
      "public func map(t : Text, f : Char -> Char) : Text",
      "public func notEqual(t1 : Text, t2 : Text) : Bool",
      "public type Pattern",
      "public func replace(t : Text, p : Pattern, r : Text) : Text",
      "public func size(t : Text) : Nat",
      "public func split(t : Text, p : Pattern) : Iter.Iter<Text>",
      "public func startsWith(t : Text, p : Pattern) : Bool",
      "public func stripEnd(t : Text, p : Pattern) : ?Text",
      "public func stripStart(t : Text, p : Pattern) : ?Text",
      "public type Text",
      "public func toArray(t : Text) : [Char]",
      "public func toIter(t : Text) : Iter.Iter<Char>",
      "public func tokens(t : Text, p : Pattern) : Iter.Iter<Text>",
      "public let toLower : Text -> Text",
      "public func toText(t : Text) : Text",
      "public let toUpper : Text -> Text",
      "public func toVarArray(t : Text) : [var Char]",
      "public func trim(t : Text, p : Pattern) : Text",
      "public func trimEnd(t : Text, p : Pattern) : Text",
      "public func trimStart(t : Text, p : Pattern) : Text"
    ]
  },
  {
    "name": "Time",
    "exports": [
      "public type Duration",
      "public let now : () -> Time",
      "public type Time",
      "public type TimerId",
      "public func toNanoseconds(duration : Duration) : Nat"
    ]
  },
  {
    "name": "Timer",
    "exports": [
      "public let cancelTimer : TimerId -> ()",
      "public func recurringTimer<system>(duration : Time.Duration, job : () -> async ()) : TimerId",
      "public func setTimer<system>(duration : Time.Duration, job : () -> async ()) : TimerId",
      "public type TimerId"
    ]
  },
  {
    "name": "Tuples",
    "exports": []
  },
  {
    "name": "Types",
    "exports": [
      "public type Blob",
      "public type Bool",
      "public type Char",
      "public type Duration",
      "public type Error",
      "public type ErrorCode",
      "public type Float",
      "public type Hash",
      "public type Int",
      "public type Int16",
      "public type Int32",
      "public type Int64",
      "public type Int8",
      "public type Iter<T>",
      "public type List<T>",
      "public type Map<K, V>",
      "public type Nat",
      "public type Nat16",
      "public type Nat32",
      "public type Nat64",
      "public type Nat8",
      "public type Order",
      "public type Pattern",
      "public type Principal",
      "public type Queue<T>",
      "public type Region",
      "public type Result<T, E>",
      "public type Set<T>",
      "public type Stack<T>",
      "public type Text",
      "public type Time",
      "public type TimerId"
    ]
  },
  {
    "name": "VarArray",
    "exports": [
      "public func all<T>(array : [var T], predicate : T -> Bool) : Bool",
      "public func any<T>(array : [var T], predicate : T -> Bool) : Bool",
      "public func clone<T>(array : [var T]) : [var T]",
      "public func compare<T>(array1 : [var T], array2 : [var T], compare : (T, T) -> Order.Order) : Order.Order",
      "public func concat<T>(array1 : [var T], array2 : [var T]) : [var T]",
      "public func empty<T>() : [var T]",
      "public func enumerate<T>(array : [var T]) : Types.Iter<(Nat, T)>",
      "public func equal<T>(array1 : [var T], array2 : [var T], equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(array : [var T], f : T -> Bool) : [var T]",
      "public func filterMap<T, R>(array : [var T], f : T -> ?R) : [var R]",
      "public func find<T>(array : [var T], predicate : T -> Bool) : ?T",
      "public func findIndex<T>(array : [var T], predicate : T -> Bool) : ?Nat",
      "public func flatMap<T, R>(array : [var T], k : T -> Types.Iter<R>) : [var R]",
      "public func flatten<T>(arrays : [var [var T]]) : [var T]",
      "public func foldLeft<T, A>(array : [var T], base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(array : [var T], base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(array : [var T], f : T -> ())",
      "public func fromIter<T>(iter : Types.Iter<T>) : [var T]",
      "public func indexOf<T>(element : T, array : [var T], equal : (T, T) -> Bool) : ?Nat",
      "public func isEmpty<T>(array : [var T]) : Bool",
      "public func join<T>(arrays : Types.Iter<[var T]>) : [var T]",
      "public func keys<T>(array : [var T]) : Types.Iter<Nat>",
      "public func lastIndexOf<T>(element : T, array : [var T], equal : (T, T) -> Bool) : ?Nat",
      "public func map<T, R>(array : [var T], f : T -> R) : [var R]",
      "public func mapEntries<T, R>(array : [var T], f : (T, Nat) -> R) : [var R]",
      "public func mapInPlace<T>(array : [var T], f : T -> T)",
      "public func mapResult<T, R, E>(array : [var T], f : T -> Result.Result<R, E>) : Result.Result<[var R], E>",
      "public func nextIndexOf<T>(element : T, array : [var T], fromInclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func prevIndexOf<T>(element : T, array : [var T], fromExclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func range<T>(array : [var T], fromInclusive : Int, toExclusive : Int) : Types.Iter<T>",
      "public func repeat<T>(item : T, size : Nat) : [var T]",
      "public func reverse<T>(array : [var T]) : [var T]",
      "public func reverseInPlace<T>(array : [var T]) : ()",
      "public func singleton<T>(element : T) : [var T]",
      "public func size<T>(array : [var T]) : Nat",
      "public func sliceToArray<T>(array : [var T], fromInclusive : Int, toExclusive : Int) : [T]",
      "public func sort<T>(array : [var T], compare : (T, T) -> Order.Order) : [var T]",
      "public func sortInPlace<T>(array : [var T], compare : (T, T) -> Order.Order) : ()",
      "public func tabulate<T>(size : Nat, generator : Nat -> T) : [var T]",
      "public func toText<T>(array : [var T], f : T -> Text) : Text",
      "public func values<T>(array : [var T]) : Types.Iter<T>"
    ]
  },
  {
    "name": "internal/BTreeHelper",
    "exports": [
      "public func deleteAndShift<T>(array : [var ?T], deleteIndex : Nat) : T",
      "public type DeletionSide",
      "public func insertAtPosition<T>(array : [var ?T], insertElement : ?T, insertIndex : Nat, currentLastElementIndex : Nat)",
      "public func insertAtPostionAndDeleteAtPosition<T>(array : [var ?T], insertElement : ?T, insertIndex : Nat, deleteIndex : Nat) : T",
      "public func insertOneAtIndexAndSplitArray<T>(array : [var ?T], insertElement : T, insertIndex : Nat) : ([var ?T], T, [var ?T])",
      "public func mergeParentWithChildrenAndDelete<T>( parentElement : ?T, childCount : Nat, leftChild : [var ?T], rightChild : [var ?T], deleteIndex : Nat, deletionSide : DeletionSide ) : ([var ?T], T)",
      "public func replaceTwoWithElementAndShift<T>(array : [var ?T], element : T, replaceIndex : Nat)",
      "public func splitArrayAndInsertTwo<T>(children : [var ?T], rebalancedChildIndex : Nat, leftChildInsert : T, rightChildInsert : T) : ([var ?T], [var ?T])"
    ]
  },
  {
    "name": "internal/PRNG",
    "exports": [
      "public class SFC64(p : Nat64, q : Nat64, r : Nat64)",
      "public func sfc64a() : SFC64"
    ]
  },
  {
    "name": "pure/List",
    "exports": [
      "public func all<T>(list : List<T>, f : T -> Bool) : Bool",
      "public func any<T>(list : List<T>, f : T -> Bool) : Bool",
      "public func chunks<T>(list : List<T>, n : Nat) : List<List<T>>",
      "public func compare<T>(list1 : List<T>, list2 : List<T>, compareItem : (T, T) -> Order.Order) : Order.Order",
      "public func concat<T>(list1 : List<T>, list2 : List<T>) : List<T>",
      "public func contains<T>(list : List<T>, equal : (T, T) -> Bool, item : T) : Bool",
      "public func drop<T>(list : List<T>, n : Nat) : List<T>",
      "public func empty<T>() : List<T>",
      "public func enumerate<T>(list : List<T>) : Iter.Iter<(Nat, T)>",
      "public func equal<T>(list1 : List<T>, list2 : List<T>, equalItem : (T, T) -> Bool) : Bool",
      "public func filter<T>(list : List<T>, f : T -> Bool) : List<T>",
      "public func filterMap<T, R>(list : List<T>, f : T -> ?R) : List<R>",
      "public func find<T>(list : List<T>, f : T -> Bool) : ?T",
      "public func findIndex<T>(list : List<T>, f : T -> Bool) : ?Nat",
      "public func flatten<T>(list : List<List<T>>) : List<T>",
      "public func foldLeft<T, A>(list : List<T>, base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(list : List<T>, base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(list : List<T>, f : T -> ())",
      "public func fromArray<T>(array : [T]) : List<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : List<T>",
      "public func fromVarArray<T>(array : [var T]) : List<T>",
      "public func get<T>(list : List<T>, n : Nat) : ?T",
      "public func isEmpty<T>(list : List<T>) : Bool",
      "public func join<T>(iter : Iter.Iter<List<T>>) : List<T>",
      "public func last<T>(list : List<T>) : ?T",
      "public type List<T>",
      "public func map<T1, T2>(list : List<T1>, f : T1 -> T2) : List<T2>",
      "public func mapResult<T, R, E>(list : List<T>, f : T -> Result.Result<R, E>) : Result.Result<List<R>, E>",
      "public func merge<T>(list1 : List<T>, list2 : List<T>, compare : (T, T) -> Order.Order) : List<T>",
      "public func partition<T>(list : List<T>, f : T -> Bool) : (List<T>, List<T>)",
      "public func popFront<T>(list : List<T>) : (?T, List<T>)",
      "public func pushFront<T>(list : List<T>, item : T) : List<T>",
      "public func repeat<T>(item : T, n : Nat) : List<T>",
      "public func reverse<T>(list : List<T>) : List<T>",
      "public func singleton<T>(item : T) : List<T>",
      "public func size<T>(list : List<T>) : Nat",
      "public func split<T>(list : List<T>, n : Nat) : (List<T>, List<T>)",
      "public func tabulate<T>(n : Nat, f : Nat -> T) : List<T>",
      "public func take<T>(list : List<T>, n : Nat) : List<T>",
      "public func toArray<T>(list : List<T>) : [T]",
      "public func toText<T>(list : List<T>, f : T -> Text) : Text",
      "public func toVarArray<T>(list : List<T>) : [var T]",
      "public func values<T>(list : List<T>) : Iter.Iter<T>",
      "public func zip<T, U>(list1 : List<T>, list2 : List<U>) : List<(T, U)>",
      "public func zipWith<T, U, V>(list1 : List<T>, list2 : List<U>, f : (T, U) -> V) : List<V>"
    ]
  },
  {
    "name": "pure/Map",
    "exports": [
      "public func add<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : Map<K, V>",
      "public func all<K, V>(map : Map<K, V>, pred : (K, V) -> Bool) : Bool",
      "public func any<K, V>(map : Map<K, V>, pred : (K, V) -> Bool) : Bool",
      "public func assertValid<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order) : ()",
      "public func compare<K, V>(map1 : Map<K, V>, map2 : Map<K, V>, compareKey : (K, K) -> Order.Order, compareValue : (V, V) -> Order.Order) : Order.Order",
      "public func containsKey<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : Bool",
      "public func delete<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : (Map<K, V>, Bool)",
      "public func empty<K, V>() : Map<K, V>",
      "public func entries<K, V>(map : Map<K, V>) : Iter.Iter<(K, V)>",
      "public func equal<K, V>(map1 : Map<K, V>, map2 : Map<K, V>, compareKey : (K, K) -> Order.Order, equalValue : (V, V) -> Bool) : Bool",
      "public func filter<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, criterion : (K, V) -> Bool) : Map<K, V>",
      "public func filterMap<K, V1, V2>(map : Map<K, V1>, compare : (K, K) -> Order.Order, f : (K, V1) -> ?V2) : Map<K, V2>",
      "public func foldLeft<K, V, A>( map : Map<K, V>, base : A, combine : (A, K, V) -> A ) : A",
      "public func foldRight<K, V, A>( map : Map<K, V>, base : A, combine : (K, V, A) -> A ) : A",
      "public func forEach<K, V>(map : Map<K, V>, operation : (K, V) -> ())",
      "public func fromIter<K, V>(iter : Iter.Iter<(K, V)>, compare : (K, K) -> Order.Order) : Map<K, V>",
      "public func get<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : ?V",
      "public func insert<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : (Map<K, V>, Bool)",
      "public func isEmpty<K, V>(map : Map<K, V>) : Bool",
      "public func keys<K, V>(map : Map<K, V>) : Iter.Iter<K>",
      "public func map<K, V1, V2>(map : Map<K, V1>, f : (K, V1) -> V2) : Map<K, V2>",
      "public type Map<K, V>",
      "public func maxEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func minEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func remove<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : Map<K, V>",
      "public func replace<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : (Map<K, V>, ?V)",
      "public func reverseEntries<K, V>(map : Map<K, V>) : Iter.Iter<(K, V)>",
      "public func singleton<K, V>(key : K, value : V) : Map<K, V>",
      "public func size<K, V>(map : Map<K, V>) : Nat",
      "public func swap<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : (Map<K, V>, ?V)",
      "public func take<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : (Map<K, V>, ?V)",
      "public func toText<K, V>(map : Map<K, V>, keyFormat : K -> Text, valueFormat : V -> Text) : Text",
      "public func values<K, V>(map : Map<K, V>) : Iter.Iter<V>"
    ]
  },
  {
    "name": "pure/Queue",
    "exports": [
      "public func all<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func compare<T>(queue1 : Queue<T>, queue2 : Queue<T>, compareItem : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(queue : Queue<T>, equal : (T, T) -> Bool, item : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(queue1 : Queue<T>, queue2 : Queue<T>, equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(queue : Queue<T>, predicate : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(queue : Queue<T>, f : T -> ?U) : Queue<U>",
      "public func forEach<T>(queue : Queue<T>, f : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>) : Queue<T>",
      "public func isEmpty<T>(queue : Queue<T>) : Bool",
      "public func map<T1, T2>(queue : Queue<T1>, f : T1 -> T2) : Queue<T2>",
      "public func peekBack<T>(queue : Queue<T>) : ?T",
      "public func peekFront<T>(queue : Queue<T>) : ?T",
      "public func popBack<T>(queue : Queue<T>) : ?(Queue<T>, T)",
      "public func popFront<T>(queue : Queue<T>) : ?(T, Queue<T>)",
      "public func pushBack<T>(queue : Queue<T>, element : T) : Queue<T>",
      "public func pushFront<T>(queue : Queue<T>, element : T) : Queue<T>",
      "public type Queue<T>",
      "public func reverse<T>(queue : Queue<T>) : Queue<T>",
      "public func singleton<T>(item : T) : Queue<T>",
      "public func size<T>(queue : Queue<T>) : Nat",
      "public func toText<T>(queue : Queue<T>, f : T -> Text) : Text",
      "public func values<T>(queue : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "pure/RealTimeQueue",
    "exports": [
      "public func all<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func compare<T>(queue1 : Queue<T>, queue2 : Queue<T>, comparison : (T, T) -> Types.Order) : Types.Order",
      "public func contains<T>(queue : Queue<T>, eq : (T, T) -> Bool, item : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(queue1 : Queue<T>, queue2 : Queue<T>, equality : (T, T) -> Bool) : Bool",
      "public func filter<T>(queue : Queue<T>, predicate : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(queue : Queue<T>, f : T -> ?U) : Queue<U>",
      "public func forEach<T>(queue : Queue<T>, f : T -> ())",
      "public func fromIter<T>(iter : Iter<T>) : Queue<T>",
      "public func isEmpty<T>(queue : Queue<T>) : Bool",
      "public func map<T1, T2>(queue : Queue<T1>, f : T1 -> T2) : Queue<T2>",
      "public func peekBack<T>(queue : Queue<T>) : ?T",
      "public func peekFront<T>(queue : Queue<T>) : ?T",
      "public func popBack<T>(queue : Queue<T>) : ?(Queue<T>, T)",
      "public func popFront<T>(queue : Queue<T>) : ?(T, Queue<T>)",
      "public func pushBack<T>(queue : Queue<T>, element : T) : Queue<T>",
      "public func pushFront<T>(queue : Queue<T>, element : T) : Queue<T>",
      "public type Queue<T>",
      "public func reverse<T>(queue : Queue<T>) : Queue<T>",
      "public func singleton<T>(element : T) : Queue<T>",
      "public func size<T>(queue : Queue<T>) : Nat",
      "public func toText<T>(queue : Queue<T>, f : T -> Text) : Text",
      "public func values<T>(queue : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "pure/Set",
    "exports": [
      "public func add<T>(set : Set<T>, compare : (T, T) -> Order.Order, elem : T) : Set<T>",
      "public func all<T>(set : Set<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(s : Set<T>, pred : T -> Bool) : Bool",
      "public func assertValid<T>(set : Set<T>, compare : (T, T) -> Order.Order) : ()",
      "public func compare<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T) : Bool",
      "public func delete<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T) : (Set<T>, Bool)",
      "public func difference<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func empty<T>() : Set<T>",
      "public func equal<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Bool",
      "public func filter<T>(set : Set<T>, compare : (T, T) -> Order.Order, criterion : T -> Bool) : Set<T>",
      "public func filterMap<T1, T2>(set : Set<T1>, compare : (T2, T2) -> Order.Order, project : T1 -> ?T2) : Set<T2>",
      "public func flatten<T>(setOfSets : Set<Set<T>>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func foldLeft<T, A>( set : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func foldRight<T, A>( set : Set<T>, base : A, combine : (T, A) -> A ) : A",
      "public func forEach<T>(set : Set<T>, operation : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func insert<T>(set : Set<T>, compare : (T, T) -> Order.Order, elem : T) : (Set<T>, Bool)",
      "public func intersection<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func isEmpty<T>(set : Set<T>) : Bool",
      "public func isSubset<T>(s1 : Set<T>, s2 : Set<T>, compare : (T, T) -> Order.Order) : Bool",
      "public func join<T>(setIterator : Iter.Iter<Set<T>>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func map<T1, T2>(s : Set<T1>, compare : (T2, T2) -> Order.Order, project : T1 -> T2) : Set<T2>",
      "public func max<T>(s : Set<T>) : ?T",
      "public func min<T>(s : Set<T>) : ?T",
      "public func remove<T>(set : Set<T>, compare : (T, T) -> Order.Order, element : T) : Set<T>",
      "public func reverseValues<T>(set : Set<T>) : Iter.Iter<T>",
      "public type Set<T>",
      "public func singleton<T>(element : T) : Set<T>",
      "public func size<T>(set : Set<T>) : Nat",
      "public func toText<T>(set : Set<T>, elementFormat : T -> Text) : Text",
      "public func union<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func values<T>(set : Set<T>) : Iter.Iter<T>"
    ]
  }
]